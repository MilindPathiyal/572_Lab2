% Calculates and plots all the 2D estimators
%
% March 18, 2017
%
% Brady Kieffer - 20517665
% Krishn Ramesh - 20521942
% Ramandeep Farmaha - 20516974
% Shubam Mehta - 20483061

clear;
close all;
load('lab2_2.mat');

%% Parametric Estimation
lowx = min([min(al(:,1)), min(bl(:,1)), min(cl(:,1))]) - 10;
lowy = min([min(al(:,2)), min(bl(:,2)), min(cl(:,2))]) - 10;
highx = max([max(al(:,1)), max(bl(:,1)), max(cl(:,1))]) + 10;
highy = max([max(al(:,2)), max(bl(:,2)), max(cl(:,2))]) + 10;
step_size = 10.0;

x = lowx:step_size:highx;
y = lowy:step_size:highy;
[xx, yy] = meshgrid(x, y);

[mu_al, cov_al] = gaussian2(al);
[mu_bl, cov_bl] = gaussian2(bl);
[mu_cl, cov_cl] = gaussian2(cl);


ML_ab = ML(mu_al, cov_al, mu_bl, cov_bl, xx, yy);
ML_ca = ML(mu_al, cov_cl, mu_cl, cov_cl, xx, yy);
ML_bc = ML(mu_bl, cov_bl, mu_cl, cov_cl, xx, yy);

ML_boundaries = zeros(size(xx, 1), size(yy, 2));
for i = 1:size(xx,1)
    for j = 1:size(yy,2)
        [ignore, class] = min([ML_ab(i,j), ML_ac(i,j), ML_bc(i,j)]);
        ML_boundaries(i,j) = classify_point(ML_ab(i,j), ML_ca(i,j), ML_bc(i,j));
    end
end

figure(3);
hold on;

% Defining a color map for the regions
% red = class A
% blue = class B
% dark grey = class C
map = [
    1, 0.5, 0.5
    0.5,0.5,1
    0.6,0.6,0.6];
colormap(map);

% Plotting ML decision boundary in black
contourf(xx, yy, ML_boundaries, 'Color', 'black');

class_c = scatter(at(:, 1), at(:, 2), 'rx');
class_d = scatter(bt(:, 1), bt(:, 2), 'bo');
class_e = scatter(ct(:, 1), ct(:, 2), 'k+');

hold off;
%% Non-Parametric Estimation

% Making a Gaussian window with variance of 400
k = 100;
mu = [k/2 k/2];
cov = [400 0; 0 400];
step = 1;

[X1,X2] = meshgrid(1:step:k);
win = mvnpdf([X1(:) X2(:)], mu, cov);
win = reshape(win,length(X2),length(X1));

lowx = min([min(al(:,1)), min(bl(:,1)), min(cl(:,1))]) - 10;
lowy = min([min(al(:,2)), min(bl(:,2)), min(cl(:,2))]) - 10;
highx = max([max(al(:,1)), max(bl(:,1)), max(cl(:,1))]) + 10;
highy = max([max(al(:,2)), max(bl(:,2)), max(cl(:,2))]) + 10;

% Defining the area of interest
res = [step lowx lowy highx  highy];

% Calculating distributions
[p_a, x_a, y_a] = parzen2(al,res, win);
[p_b, x_b, y_b] = parzen2(bl,res, win);
[p_c, x_c, y_c] = parzen2(cl,res, win);

figure(1);
hold on;
scatter(al(:,1),al(:,2));
contour(x_a,y_a,p_a);
scatter(bl(:,1),bl(:,2));
contour(x_b,y_b,p_b);
scatter(cl(:,1),cl(:,2));
contour(x_c,y_c,p_c);
hold off;

[X2,Y2] = meshgrid(x_a, y_a);
ML = zeros(size(X2));
for i = 1:size(X2,1)
   for j = 1:size(Y2,2)
       [max_p, class] = max([p_a(i,j), p_b(i,j), p_c(i,j)]);
       ML(i,j) = class;
   end
end

figure(2);
hold on;

% Defining a color map for the regions
% red = class A
% blue = class B
% dark grey = class C
map = [
    1, 0.5, 0.5
    0.5,0.5,1
    0.6,0.6,0.6];
colormap(map);

% Plotting ML decision boundary in black
contourf(X2, Y2, ML, 'Color', 'black');

class_c = scatter(at(:, 1), at(:, 2), 'rx');
class_d = scatter(bt(:, 1), bt(:, 2), 'bo');
class_e = scatter(ct(:, 1), ct(:, 2), 'k+');

hold off;

%% Testing

num_aa = 0;
num_ab = 0;
num_ac = 0;
for i=1:length(at)
    class = interp2(X2,Y2,ML,at(i,1),at(i,2));
    if class == 1; num_aa = num_aa + 1;
    elseif class == 2; num_ab = num_ab + 1;
    else num_ac = num_ac+1;
    end
end

num_ba = 0;
num_bb = 0;
num_bc = 0;
for i=1:length(bt)
    class = interp2(X2,Y2,ML,bt(i,1),bt(i,2));
    if class == 1; num_ba = num_ba + 1;
    elseif class == 2; num_bb = num_bb + 1;
    else num_bc = num_bc+1;
    end
end

num_ca = 0;
num_cb = 0;
num_cc = 0;
for i=1:length(ct)
    class = interp2(X2,Y2,ML,ct(i,1),ct(i,2));
    if class == 1; num_ca = num_ca + 1;
    elseif class == 2; num_cb = num_cb + 1;
    else num_cc = num_cc+1;
    end
end

conf_matrix_abc = [
    [num_aa, num_ab, num_ac];
    [num_ba, num_bb, num_bc];
    [num_ca, num_cb, num_cc];
];

disp('Confusion matrix for A, B & C:');
disp(conf_matrix_abc);

correct = (num_aa+num_bb+num_cc) / (length(at)+length(bt)+length(ct));
P_error = 1 - correct;

disp('P(error) for A, B & C:');
disp(P_error);